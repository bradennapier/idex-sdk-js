/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from 'ethers';
import type {
  IStorkVerifier,
  IStorkVerifierInterface,
} from '../../../../contracts/index-price-adapters/StorkIndexAndOraclePriceAdapter.sol/IStorkVerifier';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'oracle_pubkey',
        type: 'address',
      },
      {
        internalType: 'string',
        name: 'asset_pair_id',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'timestamp',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'price',
        type: 'uint256',
      },
      {
        internalType: 'bytes32',
        name: 'r',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
      {
        internalType: 'uint8',
        name: 'v',
        type: 'uint8',
      },
    ],
    name: 'verifySignature',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
] as const;

export class IStorkVerifier__factory {
  static readonly abi = _abi;
  static createInterface(): IStorkVerifierInterface {
    return new Interface(_abi) as IStorkVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null,
  ): IStorkVerifier {
    return new Contract(address, _abi, runner) as unknown as IStorkVerifier;
  }
}
