/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from 'ethers';
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from 'ethers';
import type { NonPayableOverrides } from '../../../common';
import type {
  MockPyth,
  MockPythInterface,
} from '../../../@pythnetwork/pyth-sdk-solidity/MockPyth';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_validTimePeriod',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_singleUpdateFeeInWei',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'InsufficientFee',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidArgument',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NoFreshUpdate',
    type: 'error',
  },
  {
    inputs: [],
    name: 'PriceFeedNotFound',
    type: 'error',
  },
  {
    inputs: [],
    name: 'PriceFeedNotFoundWithinRange',
    type: 'error',
  },
  {
    inputs: [],
    name: 'StalePrice',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint16',
        name: 'chainId',
        type: 'uint16',
      },
      {
        indexed: false,
        internalType: 'uint64',
        name: 'sequenceNumber',
        type: 'uint64',
      },
    ],
    name: 'BatchPriceFeedUpdate',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
      {
        indexed: false,
        internalType: 'uint64',
        name: 'publishTime',
        type: 'uint64',
      },
      {
        indexed: false,
        internalType: 'int64',
        name: 'price',
        type: 'int64',
      },
      {
        indexed: false,
        internalType: 'uint64',
        name: 'conf',
        type: 'uint64',
      },
    ],
    name: 'PriceFeedUpdate',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
      {
        internalType: 'int64',
        name: 'price',
        type: 'int64',
      },
      {
        internalType: 'uint64',
        name: 'conf',
        type: 'uint64',
      },
      {
        internalType: 'int32',
        name: 'expo',
        type: 'int32',
      },
      {
        internalType: 'int64',
        name: 'emaPrice',
        type: 'int64',
      },
      {
        internalType: 'uint64',
        name: 'emaConf',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'publishTime',
        type: 'uint64',
      },
    ],
    name: 'createPriceFeedUpdateData',
    outputs: [
      {
        internalType: 'bytes',
        name: 'priceFeedData',
        type: 'bytes',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
    ],
    name: 'getEmaPrice',
    outputs: [
      {
        components: [
          {
            internalType: 'int64',
            name: 'price',
            type: 'int64',
          },
          {
            internalType: 'uint64',
            name: 'conf',
            type: 'uint64',
          },
          {
            internalType: 'int32',
            name: 'expo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'publishTime',
            type: 'uint256',
          },
        ],
        internalType: 'struct PythStructs.Price',
        name: 'price',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: 'age',
        type: 'uint256',
      },
    ],
    name: 'getEmaPriceNoOlderThan',
    outputs: [
      {
        components: [
          {
            internalType: 'int64',
            name: 'price',
            type: 'int64',
          },
          {
            internalType: 'uint64',
            name: 'conf',
            type: 'uint64',
          },
          {
            internalType: 'int32',
            name: 'expo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'publishTime',
            type: 'uint256',
          },
        ],
        internalType: 'struct PythStructs.Price',
        name: 'price',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
    ],
    name: 'getEmaPriceUnsafe',
    outputs: [
      {
        components: [
          {
            internalType: 'int64',
            name: 'price',
            type: 'int64',
          },
          {
            internalType: 'uint64',
            name: 'conf',
            type: 'uint64',
          },
          {
            internalType: 'int32',
            name: 'expo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'publishTime',
            type: 'uint256',
          },
        ],
        internalType: 'struct PythStructs.Price',
        name: 'price',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
    ],
    name: 'getPrice',
    outputs: [
      {
        components: [
          {
            internalType: 'int64',
            name: 'price',
            type: 'int64',
          },
          {
            internalType: 'uint64',
            name: 'conf',
            type: 'uint64',
          },
          {
            internalType: 'int32',
            name: 'expo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'publishTime',
            type: 'uint256',
          },
        ],
        internalType: 'struct PythStructs.Price',
        name: 'price',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
      {
        internalType: 'uint256',
        name: 'age',
        type: 'uint256',
      },
    ],
    name: 'getPriceNoOlderThan',
    outputs: [
      {
        components: [
          {
            internalType: 'int64',
            name: 'price',
            type: 'int64',
          },
          {
            internalType: 'uint64',
            name: 'conf',
            type: 'uint64',
          },
          {
            internalType: 'int32',
            name: 'expo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'publishTime',
            type: 'uint256',
          },
        ],
        internalType: 'struct PythStructs.Price',
        name: 'price',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
    ],
    name: 'getPriceUnsafe',
    outputs: [
      {
        components: [
          {
            internalType: 'int64',
            name: 'price',
            type: 'int64',
          },
          {
            internalType: 'uint64',
            name: 'conf',
            type: 'uint64',
          },
          {
            internalType: 'int32',
            name: 'expo',
            type: 'int32',
          },
          {
            internalType: 'uint256',
            name: 'publishTime',
            type: 'uint256',
          },
        ],
        internalType: 'struct PythStructs.Price',
        name: 'price',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes[]',
        name: 'updateData',
        type: 'bytes[]',
      },
    ],
    name: 'getUpdateFee',
    outputs: [
      {
        internalType: 'uint256',
        name: 'feeAmount',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getValidTimePeriod',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes[]',
        name: 'updateData',
        type: 'bytes[]',
      },
      {
        internalType: 'bytes32[]',
        name: 'priceIds',
        type: 'bytes32[]',
      },
      {
        internalType: 'uint64',
        name: 'minPublishTime',
        type: 'uint64',
      },
      {
        internalType: 'uint64',
        name: 'maxPublishTime',
        type: 'uint64',
      },
    ],
    name: 'parsePriceFeedUpdates',
    outputs: [
      {
        components: [
          {
            internalType: 'bytes32',
            name: 'id',
            type: 'bytes32',
          },
          {
            components: [
              {
                internalType: 'int64',
                name: 'price',
                type: 'int64',
              },
              {
                internalType: 'uint64',
                name: 'conf',
                type: 'uint64',
              },
              {
                internalType: 'int32',
                name: 'expo',
                type: 'int32',
              },
              {
                internalType: 'uint256',
                name: 'publishTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct PythStructs.Price',
            name: 'price',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'int64',
                name: 'price',
                type: 'int64',
              },
              {
                internalType: 'uint64',
                name: 'conf',
                type: 'uint64',
              },
              {
                internalType: 'int32',
                name: 'expo',
                type: 'int32',
              },
              {
                internalType: 'uint256',
                name: 'publishTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct PythStructs.Price',
            name: 'emaPrice',
            type: 'tuple',
          },
        ],
        internalType: 'struct PythStructs.PriceFeed[]',
        name: 'feeds',
        type: 'tuple[]',
      },
    ],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
    ],
    name: 'priceFeedExists',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'id',
        type: 'bytes32',
      },
    ],
    name: 'queryPriceFeed',
    outputs: [
      {
        components: [
          {
            internalType: 'bytes32',
            name: 'id',
            type: 'bytes32',
          },
          {
            components: [
              {
                internalType: 'int64',
                name: 'price',
                type: 'int64',
              },
              {
                internalType: 'uint64',
                name: 'conf',
                type: 'uint64',
              },
              {
                internalType: 'int32',
                name: 'expo',
                type: 'int32',
              },
              {
                internalType: 'uint256',
                name: 'publishTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct PythStructs.Price',
            name: 'price',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'int64',
                name: 'price',
                type: 'int64',
              },
              {
                internalType: 'uint64',
                name: 'conf',
                type: 'uint64',
              },
              {
                internalType: 'int32',
                name: 'expo',
                type: 'int32',
              },
              {
                internalType: 'uint256',
                name: 'publishTime',
                type: 'uint256',
              },
            ],
            internalType: 'struct PythStructs.Price',
            name: 'emaPrice',
            type: 'tuple',
          },
        ],
        internalType: 'struct PythStructs.PriceFeed',
        name: 'priceFeed',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes[]',
        name: 'updateData',
        type: 'bytes[]',
      },
    ],
    name: 'updatePriceFeeds',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes[]',
        name: 'updateData',
        type: 'bytes[]',
      },
      {
        internalType: 'bytes32[]',
        name: 'priceIds',
        type: 'bytes32[]',
      },
      {
        internalType: 'uint64[]',
        name: 'publishTimes',
        type: 'uint64[]',
      },
    ],
    name: 'updatePriceFeedsIfNecessary',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
] as const;

const _bytecode =
  '0x60803461005957601f6111cb38819003918201601f19168301916001600160401b0383118484101761005e578084926040948552833981010312610059576020815191015160025560035560405161115690816100758239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060405260048036101561001357600080fd5b60003560e01c806331d98b3f146108d15780634716e9c5146105dc578063711a2e28146105c35780639474f45b1461058357806396834ad3146104ff57806396db632714610370578063a4ae35e014610357578063b5dcc911146102d3578063b5ec02611461027f578063b9256d28146101fa578063caaf43f1146101ae578063d47eed451461014b578063e18910a31461010f5763ef9e5e28146100b757600080fd5b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a57803567ffffffffffffffff811161010a57610108916101029136910161091a565b90610ec8565b005b600080fd5b3461010a5760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a576020600354604051908152f35b503461010a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a5780359067ffffffffffffffff821161010a5761019f6101a69160209336910161091a565b90506110de565b604051908152f35b503461010a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a576101eb6101209135610d46565b6101f86040518092610962565bf35b5060607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a5767ffffffffffffffff813581811161010a57610244903690840161091a565b9160243581811161010a5761025c903690860161091a565b9160443590811161010a57610108956102779136910161091a565b949093610bdd565b503461010a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a576102c9602091356000526000602052604060002054151590565b6040519015158152f35b503461010a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a5761031c608091610311610a84565b506003549035610b09565b6101f8604051809260608091805160070b845267ffffffffffffffff6020820151166020850152604081015160030b60408501520151910152565b3461010a57608061031c61036a366109e9565b90610aa9565b503461010a5760e07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a57602435908160070b80920361010a576103b761094b565b91606435918260030b80930361010a57608435928360070b80940361010a5760a43567ffffffffffffffff9485821680920361010a5760c4359286841680940361010a576060928484610408610cd8565b9888358a5260209b8c8b01918251528b8d8351019116905284604082510152510152604087019283515288835101526040825101525101526104506040519285840190610962565b61012082526101408201928311828410176104d15750816040528282528051928361016083015260005b8481106104bc57836040847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f896000610180828601015201168101030190f35b8082918401610180838201519101520161047a565b6041907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b503461010a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a57602061054660809261053f610a84565b5035610d46565b01516101f8604051809260608091805160070b845267ffffffffffffffff6020820151166020850152604081015160030b60408501520151910152565b503461010a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a57604061054660809261053f610a84565b3461010a57608061031c6105d6366109e9565b90610b09565b5060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a57803567ffffffffffffffff811161010a57610625903690830161091a565b919060243567ffffffffffffffff811161010a57610646903690840161091a565b939061065061094b565b9460643567ffffffffffffffff8116810361010a5761066e846110de565b34106108a85761067d826110f4565b60405197907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090601f018116890167ffffffffffffffff81118a82101761087a576040528389526106cd846110f4565b0160005b81811061086357505060005b838110610730576040805160208082528b51818301819052818d019383019160005b82811061070c5784840385f35b90919282610120826107216001948a51610962565b019601910194929190946106ff565b60005b868110610790575b50610746818a61110c565b5151610753828688610b9e565b35036107675761076290610b71565b6106dd565b876040517f45805f5d000000000000000000000000000000000000000000000000000000008152fd5b6107ad6107a582898b9c9d98999a959b610dcb565b810190610e8d565b6107b7898761110c565b526107c2888661110c565b506107cd888661110c565b51516107da89888a610b9e565b35146107f7575b6107ea90610b71565b9897969095949398610733565b6060602061080c8a889d9c9b959a999861110c565b51015101518067ffffffffffffffff85161115908161084e575b5060000361073b576107ea906000610845848d98999a959b9c9d61110c565b515290506107e1565b905067ffffffffffffffff8516101538610826565b60209061086e610cd8565b82828d010152016106d1565b6041897f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b856040517f025dbdd4000000000000000000000000000000000000000000000000000000008152fd5b503461010a5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261010a5761031c60809161090f610a84565b506003549035610aa9565b9181601f8401121561010a5782359167ffffffffffffffff831161010a576020808501948460051b01011161010a57565b6044359067ffffffffffffffff8216820361010a57565b9060a060406109e793805184526109af6020820151602086019060608091805160070b845267ffffffffffffffff6020820151166020850152604081015160030b60408501520151910152565b015191019060608091805160070b845267ffffffffffffffff6020820151166020850152604081015160030b60408501520151910152565b565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc604091011261010a576004359060243590565b6080810190811067ffffffffffffffff821117610a3957604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6060810190811067ffffffffffffffff821117610a3957604052565b60405190610a9182610a1d565b60006060838281528260208201528260408201520152565b610ac6602091610ab7610a84565b50610ac0610a84565b50610d46565b015190610ad7606083015142610b53565b11610adf5790565b60046040517f19abf40e000000000000000000000000000000000000000000000000000000008152fd5b610ac6604091610ab7610a84565b91908203918211610b2457565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81811115610b685790610b6591610b17565b90565b610b6591610b17565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610b245760010190565b9190811015610bae5760051b0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b929093858203610cae57600091825b818110610c1d5760046040517fde2c57fa000000000000000000000000000000000000000000000000000000008152fd5b610c3f610c2b828488610b9e565b356000526000602052604060002054151590565b158015610c68575b610c5957610c5490610b71565b610bec565b50505050506109e79250610ec8565b5060606020610c81610c7b84868a610b9e565b35610d46565b01510151610c90828a86610b9e565b359067ffffffffffffffff8216809203610caa5710610c47565b8580fd5b60046040517fa9cb9e0d000000000000000000000000000000000000000000000000000000008152fd5b60405190610ce582610a68565b8160008152610cf2610a84565b60208201526040610d01610a84565b910152565b90604051610d1381610a1d565b60606001829480548060070b855267ffffffffffffffff8160401c16602086015260801c60030b60408501520154910152565b610d4e610cd8565b50600081815280602052604081205415610da15760409181528060205220610d99600360405192610d7e84610a68565b80548452610d8e60018201610d06565b602085015201610d06565b604082015290565b60046040517f14aebe68000000000000000000000000000000000000000000000000000000008152fd5b9190811015610bae5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18136030182121561010a57019081359167ffffffffffffffff831161010a57602001823603811361010a579190565b919082608091031261010a57604051610e4381610a1d565b809280358060070b810361010a578252602081013567ffffffffffffffff8116810361010a57602083015260408101358060030b810361010a576040830152606090810135910152565b906101208282031261010a57610d999060a060405193610eac85610a68565b80358552610ebd8360208301610e2b565b602086015201610e2b565b90610ed2816110de565b34106110b45760005b818110610f595750505060015467ffffffffffffffff60018183167f943f0e8a16c19895fb87cbeb1a349ed86d7f31923089dd36c1a1ed5e300f267b60408051848152836020820152a10190808211610b24577fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009116911617600155565b610f676107a5828486610dcb565b8051600052602090600082526040600281600020015491838101936060855101518410610fa2575b5050505050610f9d90610b71565b610edb565b9082918151600052826000208251968782555190815191600182019485548583015196888401519373ffffffff00000000000000000000000000000000918767ffffffffffffffff9b8c978c7fffffffffffffffffffffffff000000000000000000000000000000000000000097886fffffffffffffffff00000000000000009b8c9460801b8a169616911617921b16171790556060015160028601558960038601930151938451928a8554928d8b890151901b16938d88015160801b169416911617171790556060015190600401558385519616865260070b90850152169082015260607fd06a6b7f4918494b3719217d1802786c1f5112a6c1d88fe2cfec00b4584f6aec91a23880808080610f8f565b60046040517f025dbdd4000000000000000000000000000000000000000000000000000000008152fd5b600254818102918183041490151715610b245790565b67ffffffffffffffff8111610a395760051b60200190565b8051821015610bae5760209160051b01019056fea2646970667358221220f1f1fa80f7a091838582378f6096a859b8bef73ecd27336e50019b8f66554efc64736f6c63430008120033';

type MockPythConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPythConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPyth__factory extends ContractFactory {
  constructor(...args: MockPythConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _validTimePeriod: BigNumberish,
    _singleUpdateFeeInWei: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _validTimePeriod,
      _singleUpdateFeeInWei,
      overrides || {},
    );
  }
  override deploy(
    _validTimePeriod: BigNumberish,
    _singleUpdateFeeInWei: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string },
  ) {
    return super.deploy(
      _validTimePeriod,
      _singleUpdateFeeInWei,
      overrides || {},
    ) as Promise<
      MockPyth & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockPyth__factory {
    return super.connect(runner) as MockPyth__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPythInterface {
    return new Interface(_abi) as MockPythInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockPyth {
    return new Contract(address, _abi, runner) as unknown as MockPyth;
  }
}
