/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../../common';

export declare namespace IPool {
  export type SwapObjStruct = {
    amount: BigNumberish;
    eqFee: BigNumberish;
    eqReward: BigNumberish;
    lpFee: BigNumberish;
    protocolFee: BigNumberish;
    lkbRemove: BigNumberish;
  };

  export type SwapObjStructOutput = [
    amount: bigint,
    eqFee: bigint,
    eqReward: bigint,
    lpFee: bigint,
    protocolFee: bigint,
    lkbRemove: bigint,
  ] & {
    amount: bigint;
    eqFee: bigint;
    eqReward: bigint;
    lpFee: bigint;
    protocolFee: bigint;
    lkbRemove: bigint;
  };
}

export interface IStargateFeeLibraryInterface extends Interface {
  getFunction(nameOrSignature: 'getFees'): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'getFees',
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish,
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'getFees', data: BytesLike): Result;
}

export interface IStargateFeeLibrary extends BaseContract {
  connect(runner?: ContractRunner | null): IStargateFeeLibrary;
  waitForDeployment(): Promise<this>;

  interface: IStargateFeeLibraryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  getFees: TypedContractMethod<
    [
      _srcPoolId: BigNumberish,
      _dstPoolId: BigNumberish,
      _dstChainId: BigNumberish,
      _from: AddressLike,
      _amountSD: BigNumberish,
    ],
    [IPool.SwapObjStructOutput],
    'view'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'getFees',
  ): TypedContractMethod<
    [
      _srcPoolId: BigNumberish,
      _dstPoolId: BigNumberish,
      _dstChainId: BigNumberish,
      _from: AddressLike,
      _amountSD: BigNumberish,
    ],
    [IPool.SwapObjStructOutput],
    'view'
  >;

  filters: {};
}
