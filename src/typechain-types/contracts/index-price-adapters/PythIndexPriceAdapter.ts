/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from 'ethers';
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from '../../common';

export type IndexPriceStruct = {
  baseAssetSymbol: string;
  timestampInMs: BigNumberish;
  price: BigNumberish;
};

export type IndexPriceStructOutput = [
  baseAssetSymbol: string,
  timestampInMs: bigint,
  price: bigint,
] & { baseAssetSymbol: string; timestampInMs: bigint; price: bigint };

export interface PythIndexPriceAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | 'activator'
      | 'addBaseAssetSymbolAndPriceId'
      | 'adminWallet'
      | 'baseAssetSymbolsByPriceId'
      | 'exchange'
      | 'ownerWallet'
      | 'priceIdsByBaseAssetSymbol'
      | 'pyth'
      | 'removeAdmin'
      | 'removeOwner'
      | 'setActive'
      | 'setAdmin'
      | 'setOwner'
      | 'validateIndexPricePayload'
      | 'withdrawNativeAsset',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'activator', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'addBaseAssetSymbolAndPriceId',
    values: [string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'adminWallet',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'baseAssetSymbolsByPriceId',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'exchange', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'ownerWallet',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'priceIdsByBaseAssetSymbol',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'pyth', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeAdmin',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'removeOwner',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setActive',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setAdmin',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setOwner',
    values: [AddressLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'validateIndexPricePayload',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'withdrawNativeAsset',
    values: [AddressLike, BigNumberish],
  ): string;

  decodeFunctionResult(functionFragment: 'activator', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'addBaseAssetSymbolAndPriceId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'adminWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'baseAssetSymbolsByPriceId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'exchange', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'ownerWallet',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'priceIdsByBaseAssetSymbol',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'pyth', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'removeAdmin',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeOwner',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setActive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setOwner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'validateIndexPricePayload',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'withdrawNativeAsset',
    data: BytesLike,
  ): Result;
}

export interface PythIndexPriceAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): PythIndexPriceAdapter;
  waitForDeployment(): Promise<this>;

  interface: PythIndexPriceAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>,
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent,
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent,
  ): Promise<this>;

  activator: TypedContractMethod<[], [string], 'view'>;

  addBaseAssetSymbolAndPriceId: TypedContractMethod<
    [baseAssetSymbol: string, priceId: BytesLike],
    [void],
    'nonpayable'
  >;

  adminWallet: TypedContractMethod<[], [string], 'view'>;

  baseAssetSymbolsByPriceId: TypedContractMethod<
    [arg0: BytesLike],
    [string],
    'view'
  >;

  exchange: TypedContractMethod<[], [string], 'view'>;

  ownerWallet: TypedContractMethod<[], [string], 'view'>;

  priceIdsByBaseAssetSymbol: TypedContractMethod<
    [arg0: string],
    [string],
    'view'
  >;

  pyth: TypedContractMethod<[], [string], 'view'>;

  removeAdmin: TypedContractMethod<[], [void], 'nonpayable'>;

  removeOwner: TypedContractMethod<[], [void], 'nonpayable'>;

  setActive: TypedContractMethod<
    [exchange_: AddressLike],
    [void],
    'nonpayable'
  >;

  setAdmin: TypedContractMethod<[newAdmin: AddressLike], [void], 'nonpayable'>;

  setOwner: TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;

  validateIndexPricePayload: TypedContractMethod<
    [payload: BytesLike],
    [IndexPriceStructOutput],
    'nonpayable'
  >;

  withdrawNativeAsset: TypedContractMethod<
    [destinationWallet: AddressLike, quantity: BigNumberish],
    [void],
    'nonpayable'
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment,
  ): T;

  getFunction(
    nameOrSignature: 'activator',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'addBaseAssetSymbolAndPriceId',
  ): TypedContractMethod<
    [baseAssetSymbol: string, priceId: BytesLike],
    [void],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'adminWallet',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'baseAssetSymbolsByPriceId',
  ): TypedContractMethod<[arg0: BytesLike], [string], 'view'>;
  getFunction(
    nameOrSignature: 'exchange',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'ownerWallet',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'priceIdsByBaseAssetSymbol',
  ): TypedContractMethod<[arg0: string], [string], 'view'>;
  getFunction(
    nameOrSignature: 'pyth',
  ): TypedContractMethod<[], [string], 'view'>;
  getFunction(
    nameOrSignature: 'removeAdmin',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'removeOwner',
  ): TypedContractMethod<[], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setActive',
  ): TypedContractMethod<[exchange_: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setAdmin',
  ): TypedContractMethod<[newAdmin: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'setOwner',
  ): TypedContractMethod<[newOwner: AddressLike], [void], 'nonpayable'>;
  getFunction(
    nameOrSignature: 'validateIndexPricePayload',
  ): TypedContractMethod<
    [payload: BytesLike],
    [IndexPriceStructOutput],
    'nonpayable'
  >;
  getFunction(
    nameOrSignature: 'withdrawNativeAsset',
  ): TypedContractMethod<
    [destinationWallet: AddressLike, quantity: BigNumberish],
    [void],
    'nonpayable'
  >;

  filters: {};
}
